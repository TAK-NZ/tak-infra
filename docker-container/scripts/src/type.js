import { Value } from '@sinclair/typebox/value';
export default class TypeValidator {
    /**
     * Arbitrary JSON objects occasionally need to get typed as part of an ETL
     * This function provides the ability to strictly type unknown objects at runtime
     */
    static type(type, body, opts) {
        if (!opts)
            opts = {};
        if (opts.verbose === undefined)
            opts.verbose = false;
        if (opts.default === undefined)
            opts.default = true;
        if (opts.convert === undefined)
            opts.convert = true;
        if (opts.clean === undefined)
            opts.clean = true;
        if (opts.default) {
            Value.Default(type, body);
        }
        if (opts.clean) {
            Value.Clean(type, body);
        }
        if (opts.convert) {
            Value.Convert(type, body);
        }
        const result = Value.Check(type, body);
        if (result)
            return body;
        const errors = Value.Errors(type, body);
        const firstError = errors.First();
        if (opts.verbose) {
            throw new Error(`Internal Validation Error: ${JSON.stringify(firstError)} -- Body: ${JSON.stringify(body)}`);
        }
        else {
            throw new Error(`Internal Validation Error`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBUy9DLE1BQU0sQ0FBQyxPQUFPLE9BQU8sYUFBYTtJQUM5Qjs7O09BR0c7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUNQLElBQU8sRUFDUCxJQUFhLEVBQ2IsSUFBZTtRQUVmLElBQUksQ0FBQyxJQUFJO1lBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUztZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEQsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVM7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUztZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWhELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDN0IsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDM0IsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDN0IsQ0FBQztRQUVELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRXRDLElBQUksTUFBTTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRXhCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVsQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGFBQWEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakgsQ0FBQzthQUFNLENBQUM7WUFDSixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDakQsQ0FBQztJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRpYywgVFNjaGVtYSwgVFVua25vd24gfSBmcm9tICdAc2luY2xhaXIvdHlwZWJveCdcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAnQHNpbmNsYWlyL3R5cGVib3gvdmFsdWUnXG5cbmV4cG9ydCB0eXBlIFR5cGVPcHRzID0ge1xuICAgIHZlcmJvc2U/OiBib29sZWFuO1xuICAgIGRlZmF1bHQ/OiBib29sZWFuO1xuICAgIGNvbnZlcnQ/OiBib29sZWFuO1xuICAgIGNsZWFuPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZVZhbGlkYXRvciB7XG4gICAgLyoqXG4gICAgICogQXJiaXRyYXJ5IEpTT04gb2JqZWN0cyBvY2Nhc2lvbmFsbHkgbmVlZCB0byBnZXQgdHlwZWQgYXMgcGFydCBvZiBhbiBFVExcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZSBhYmlsaXR5IHRvIHN0cmljdGx5IHR5cGUgdW5rbm93biBvYmplY3RzIGF0IHJ1bnRpbWVcbiAgICAgKi9cbiAgICBzdGF0aWMgdHlwZTxUIGV4dGVuZHMgVFNjaGVtYSA9IFRVbmtub3duPihcbiAgICAgICAgdHlwZTogVCxcbiAgICAgICAgYm9keTogdW5rbm93bixcbiAgICAgICAgb3B0cz86IFR5cGVPcHRzXG4gICAgKTogU3RhdGljPFQ+IHtcbiAgICAgICAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gICAgICAgIGlmIChvcHRzLnZlcmJvc2UgPT09IHVuZGVmaW5lZCkgb3B0cy52ZXJib3NlID0gZmFsc2U7XG4gICAgICAgIGlmIChvcHRzLmRlZmF1bHQgPT09IHVuZGVmaW5lZCkgb3B0cy5kZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9wdHMuY29udmVydCA9PT0gdW5kZWZpbmVkKSBvcHRzLmNvbnZlcnQgPSB0cnVlO1xuICAgICAgICBpZiAob3B0cy5jbGVhbiA9PT0gdW5kZWZpbmVkKSBvcHRzLmNsZWFuID0gdHJ1ZTtcblxuICAgICAgICBpZiAob3B0cy5kZWZhdWx0KSB7XG4gICAgICAgICAgICBWYWx1ZS5EZWZhdWx0KHR5cGUsIGJvZHkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0cy5jbGVhbikge1xuICAgICAgICAgICAgVmFsdWUuQ2xlYW4odHlwZSwgYm9keSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzLmNvbnZlcnQpIHtcbiAgICAgICAgICAgIFZhbHVlLkNvbnZlcnQodHlwZSwgYm9keSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFZhbHVlLkNoZWNrKHR5cGUsIGJvZHkpXG5cbiAgICAgICAgaWYgKHJlc3VsdCkgcmV0dXJuIGJvZHk7XG5cbiAgICAgICAgY29uc3QgZXJyb3JzID0gVmFsdWUuRXJyb3JzKHR5cGUsIGJvZHkpO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0RXJyb3IgPSBlcnJvcnMuRmlyc3QoKTtcblxuICAgICAgICBpZiAob3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIFZhbGlkYXRpb24gRXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkoZmlyc3RFcnJvcil9IC0tIEJvZHk6ICR7SlNPTi5zdHJpbmdpZnkoYm9keSl9YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIFZhbGlkYXRpb24gRXJyb3JgKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=