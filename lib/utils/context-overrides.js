"use strict";
/**
 * Dynamic context override utilities
 * Simplified flat parameter system for command-line context overrides
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyContextOverrides = applyContextOverrides;
function applyContextOverrides(app, baseConfig) {
    const topLevelOverrides = {
        stackName: app.node.tryGetContext('stackName'),
    };
    return {
        ...baseConfig,
        ...Object.fromEntries(Object.entries(topLevelOverrides).filter(([_, v]) => v !== undefined)),
        database: {
            ...baseConfig.database,
            instanceClass: app.node.tryGetContext('instanceClass') ?? baseConfig.database.instanceClass,
            instanceCount: app.node.tryGetContext('instanceCount') ?? baseConfig.database.instanceCount,
            backupRetentionDays: app.node.tryGetContext('backupRetentionDays') ?? baseConfig.database.backupRetentionDays,
            deleteProtection: app.node.tryGetContext('deleteProtection') ?? baseConfig.database.deleteProtection,
        },
        ecs: {
            ...baseConfig.ecs,
            taskCpu: app.node.tryGetContext('taskCpu') ?? baseConfig.ecs.taskCpu,
            taskMemory: app.node.tryGetContext('taskMemory') ?? baseConfig.ecs.taskMemory,
            desiredCount: app.node.tryGetContext('desiredCount') ?? baseConfig.ecs.desiredCount,
        },
        takserver: {
            ...baseConfig.takserver,
            hostname: app.node.tryGetContext('takServerHostname') ?? baseConfig.takserver.hostname,
            branding: app.node.tryGetContext('branding') ?? baseConfig.takserver.branding,
            version: app.node.tryGetContext('takServerVersion') ?? baseConfig.takserver.version,
            useS3Config: app.node.tryGetContext('useS3Config') ?? baseConfig.takserver.useS3Config,
        },
        general: {
            ...baseConfig.general,
            removalPolicy: app.node.tryGetContext('removalPolicy') || baseConfig.general.removalPolicy,
            enableDetailedLogging: app.node.tryGetContext('enableDetailedLogging') ?? baseConfig.general.enableDetailedLogging,
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1vdmVycmlkZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb250ZXh0LW92ZXJyaWRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOztBQUtILHNEQXFDQztBQXJDRCxTQUFnQixxQkFBcUIsQ0FDbkMsR0FBWSxFQUNaLFVBQW9DO0lBRXBDLE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztLQUMvQyxDQUFDO0lBRUYsT0FBTztRQUNMLEdBQUcsVUFBVTtRQUNiLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztRQUM1RixRQUFRLEVBQUU7WUFDUixHQUFHLFVBQVUsQ0FBQyxRQUFRO1lBQ3RCLGFBQWEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDM0YsYUFBYSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYTtZQUMzRixtQkFBbUIsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsbUJBQW1CO1lBQzdHLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7U0FDckc7UUFDRCxHQUFHLEVBQUU7WUFDSCxHQUFHLFVBQVUsQ0FBQyxHQUFHO1lBQ2pCLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU87WUFDcEUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUM3RSxZQUFZLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxZQUFZO1NBQ3BGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsR0FBRyxVQUFVLENBQUMsU0FBUztZQUN2QixRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVE7WUFDdEYsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUTtZQUM3RSxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU87WUFDbkYsV0FBVyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVztTQUN2RjtRQUNELE9BQU8sRUFBRTtZQUNQLEdBQUcsVUFBVSxDQUFDLE9BQU87WUFDckIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsYUFBYTtZQUMxRixxQkFBcUIsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMscUJBQXFCO1NBQ25IO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIER5bmFtaWMgY29udGV4dCBvdmVycmlkZSB1dGlsaXRpZXNcbiAqIFNpbXBsaWZpZWQgZmxhdCBwYXJhbWV0ZXIgc3lzdGVtIGZvciBjb21tYW5kLWxpbmUgY29udGV4dCBvdmVycmlkZXNcbiAqL1xuXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29udGV4dEVudmlyb25tZW50Q29uZmlnIH0gZnJvbSAnLi4vc3RhY2stY29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q29udGV4dE92ZXJyaWRlcyhcbiAgYXBwOiBjZGsuQXBwLCBcbiAgYmFzZUNvbmZpZzogQ29udGV4dEVudmlyb25tZW50Q29uZmlnXG4pOiBDb250ZXh0RW52aXJvbm1lbnRDb25maWcge1xuICBjb25zdCB0b3BMZXZlbE92ZXJyaWRlcyA9IHtcbiAgICBzdGFja05hbWU6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ3N0YWNrTmFtZScpLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgLi4uYmFzZUNvbmZpZyxcbiAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXModG9wTGV2ZWxPdmVycmlkZXMpLmZpbHRlcigoW18sIHZdKSA9PiB2ICE9PSB1bmRlZmluZWQpKSxcbiAgICBkYXRhYmFzZToge1xuICAgICAgLi4uYmFzZUNvbmZpZy5kYXRhYmFzZSxcbiAgICAgIGluc3RhbmNlQ2xhc3M6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2luc3RhbmNlQ2xhc3MnKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLmluc3RhbmNlQ2xhc3MsXG4gICAgICBpbnN0YW5jZUNvdW50OiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdpbnN0YW5jZUNvdW50JykgPz8gYmFzZUNvbmZpZy5kYXRhYmFzZS5pbnN0YW5jZUNvdW50LFxuICAgICAgYmFja3VwUmV0ZW50aW9uRGF5czogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnYmFja3VwUmV0ZW50aW9uRGF5cycpID8/IGJhc2VDb25maWcuZGF0YWJhc2UuYmFja3VwUmV0ZW50aW9uRGF5cyxcbiAgICAgIGRlbGV0ZVByb3RlY3Rpb246IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2RlbGV0ZVByb3RlY3Rpb24nKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLmRlbGV0ZVByb3RlY3Rpb24sXG4gICAgfSxcbiAgICBlY3M6IHtcbiAgICAgIC4uLmJhc2VDb25maWcuZWNzLFxuICAgICAgdGFza0NwdTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgndGFza0NwdScpID8/IGJhc2VDb25maWcuZWNzLnRhc2tDcHUsXG4gICAgICB0YXNrTWVtb3J5OiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd0YXNrTWVtb3J5JykgPz8gYmFzZUNvbmZpZy5lY3MudGFza01lbW9yeSxcbiAgICAgIGRlc2lyZWRDb3VudDogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZGVzaXJlZENvdW50JykgPz8gYmFzZUNvbmZpZy5lY3MuZGVzaXJlZENvdW50LFxuICAgIH0sXG4gICAgdGFrc2VydmVyOiB7XG4gICAgICAuLi5iYXNlQ29uZmlnLnRha3NlcnZlcixcbiAgICAgIGhvc3RuYW1lOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd0YWtTZXJ2ZXJIb3N0bmFtZScpID8/IGJhc2VDb25maWcudGFrc2VydmVyLmhvc3RuYW1lLFxuICAgICAgYnJhbmRpbmc6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2JyYW5kaW5nJykgPz8gYmFzZUNvbmZpZy50YWtzZXJ2ZXIuYnJhbmRpbmcsXG4gICAgICB2ZXJzaW9uOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd0YWtTZXJ2ZXJWZXJzaW9uJykgPz8gYmFzZUNvbmZpZy50YWtzZXJ2ZXIudmVyc2lvbixcbiAgICAgIHVzZVMzQ29uZmlnOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd1c2VTM0NvbmZpZycpID8/IGJhc2VDb25maWcudGFrc2VydmVyLnVzZVMzQ29uZmlnLFxuICAgIH0sXG4gICAgZ2VuZXJhbDoge1xuICAgICAgLi4uYmFzZUNvbmZpZy5nZW5lcmFsLFxuICAgICAgcmVtb3ZhbFBvbGljeTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgncmVtb3ZhbFBvbGljeScpIHx8IGJhc2VDb25maWcuZ2VuZXJhbC5yZW1vdmFsUG9saWN5LFxuICAgICAgZW5hYmxlRGV0YWlsZWRMb2dnaW5nOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbmFibGVEZXRhaWxlZExvZ2dpbmcnKSA/PyBiYXNlQ29uZmlnLmdlbmVyYWwuZW5hYmxlRGV0YWlsZWRMb2dnaW5nLFxuICAgIH0sXG4gIH07XG59Il19