"use strict";
/**
 * Dynamic context override utilities
 * Simplified flat parameter system for command-line context overrides
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyContextOverrides = applyContextOverrides;
function applyContextOverrides(app, baseConfig) {
    const topLevelOverrides = {
        stackName: app.node.tryGetContext('stackName'),
    };
    return {
        ...baseConfig,
        ...Object.fromEntries(Object.entries(topLevelOverrides).filter(([_, v]) => v !== undefined)),
        database: {
            ...baseConfig.database,
            instanceClass: app.node.tryGetContext('instanceClass') ?? baseConfig.database.instanceClass,
            instanceCount: app.node.tryGetContext('instanceCount') ?? baseConfig.database.instanceCount,
            backupRetentionDays: app.node.tryGetContext('backupRetentionDays') ?? baseConfig.database.backupRetentionDays,
            deleteProtection: app.node.tryGetContext('deleteProtection') ?? baseConfig.database.deleteProtection,
        },
        ecs: {
            ...baseConfig.ecs,
            taskCpu: app.node.tryGetContext('taskCpu') ?? baseConfig.ecs.taskCpu,
            taskMemory: app.node.tryGetContext('taskMemory') ?? baseConfig.ecs.taskMemory,
            desiredCount: app.node.tryGetContext('desiredCount') ?? baseConfig.ecs.desiredCount,
        },
        takserver: {
            ...baseConfig.takserver,
            hostname: app.node.tryGetContext('takServerHostname') ?? baseConfig.takserver.hostname,
            servicename: app.node.tryGetContext('takServerServicename') ?? baseConfig.takserver.servicename,
            branding: app.node.tryGetContext('branding') ?? baseConfig.takserver.branding,
            version: app.node.tryGetContext('takServerVersion') ?? baseConfig.takserver.version,
            useS3Config: app.node.tryGetContext('useS3Config') ?? baseConfig.takserver.useS3Config,
        },
        general: {
            ...baseConfig.general,
            removalPolicy: app.node.tryGetContext('removalPolicy') || baseConfig.general.removalPolicy,
            enableDetailedLogging: app.node.tryGetContext('enableDetailedLogging') ?? baseConfig.general.enableDetailedLogging,
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1vdmVycmlkZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb250ZXh0LW92ZXJyaWRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOztBQUtILHNEQXNDQztBQXRDRCxTQUFnQixxQkFBcUIsQ0FDbkMsR0FBWSxFQUNaLFVBQW9DO0lBRXBDLE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztLQUMvQyxDQUFDO0lBRUYsT0FBTztRQUNMLEdBQUcsVUFBVTtRQUNiLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztRQUM1RixRQUFRLEVBQUU7WUFDUixHQUFHLFVBQVUsQ0FBQyxRQUFRO1lBQ3RCLGFBQWEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDM0YsYUFBYSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYTtZQUMzRixtQkFBbUIsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsbUJBQW1CO1lBQzdHLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7U0FDckc7UUFDRCxHQUFHLEVBQUU7WUFDSCxHQUFHLFVBQVUsQ0FBQyxHQUFHO1lBQ2pCLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU87WUFDcEUsVUFBVSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUM3RSxZQUFZLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxZQUFZO1NBQ3BGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsR0FBRyxVQUFVLENBQUMsU0FBUztZQUN2QixRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVE7WUFDdEYsV0FBVyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXO1lBQy9GLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVE7WUFDN0UsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPO1lBQ25GLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLFdBQVc7U0FDdkY7UUFDRCxPQUFPLEVBQUU7WUFDUCxHQUFHLFVBQVUsQ0FBQyxPQUFPO1lBQ3JCLGFBQWEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFDMUYscUJBQXFCLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLHFCQUFxQjtTQUNuSDtLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEeW5hbWljIGNvbnRleHQgb3ZlcnJpZGUgdXRpbGl0aWVzXG4gKiBTaW1wbGlmaWVkIGZsYXQgcGFyYW1ldGVyIHN5c3RlbSBmb3IgY29tbWFuZC1saW5lIGNvbnRleHQgb3ZlcnJpZGVzXG4gKi9cblxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnRleHRFbnZpcm9ubWVudENvbmZpZyB9IGZyb20gJy4uL3N0YWNrLWNvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNvbnRleHRPdmVycmlkZXMoXG4gIGFwcDogY2RrLkFwcCwgXG4gIGJhc2VDb25maWc6IENvbnRleHRFbnZpcm9ubWVudENvbmZpZ1xuKTogQ29udGV4dEVudmlyb25tZW50Q29uZmlnIHtcbiAgY29uc3QgdG9wTGV2ZWxPdmVycmlkZXMgPSB7XG4gICAgc3RhY2tOYW1lOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdzdGFja05hbWUnKSxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIC4uLmJhc2VDb25maWcsXG4gICAgLi4uT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHRvcExldmVsT3ZlcnJpZGVzKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiAhPT0gdW5kZWZpbmVkKSksXG4gICAgZGF0YWJhc2U6IHtcbiAgICAgIC4uLmJhc2VDb25maWcuZGF0YWJhc2UsXG4gICAgICBpbnN0YW5jZUNsYXNzOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdpbnN0YW5jZUNsYXNzJykgPz8gYmFzZUNvbmZpZy5kYXRhYmFzZS5pbnN0YW5jZUNsYXNzLFxuICAgICAgaW5zdGFuY2VDb3VudDogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnaW5zdGFuY2VDb3VudCcpID8/IGJhc2VDb25maWcuZGF0YWJhc2UuaW5zdGFuY2VDb3VudCxcbiAgICAgIGJhY2t1cFJldGVudGlvbkRheXM6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2JhY2t1cFJldGVudGlvbkRheXMnKSA/PyBiYXNlQ29uZmlnLmRhdGFiYXNlLmJhY2t1cFJldGVudGlvbkRheXMsXG4gICAgICBkZWxldGVQcm90ZWN0aW9uOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdkZWxldGVQcm90ZWN0aW9uJykgPz8gYmFzZUNvbmZpZy5kYXRhYmFzZS5kZWxldGVQcm90ZWN0aW9uLFxuICAgIH0sXG4gICAgZWNzOiB7XG4gICAgICAuLi5iYXNlQ29uZmlnLmVjcyxcbiAgICAgIHRhc2tDcHU6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ3Rhc2tDcHUnKSA/PyBiYXNlQ29uZmlnLmVjcy50YXNrQ3B1LFxuICAgICAgdGFza01lbW9yeTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgndGFza01lbW9yeScpID8/IGJhc2VDb25maWcuZWNzLnRhc2tNZW1vcnksXG4gICAgICBkZXNpcmVkQ291bnQ6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2Rlc2lyZWRDb3VudCcpID8/IGJhc2VDb25maWcuZWNzLmRlc2lyZWRDb3VudCxcbiAgICB9LFxuICAgIHRha3NlcnZlcjoge1xuICAgICAgLi4uYmFzZUNvbmZpZy50YWtzZXJ2ZXIsXG4gICAgICBob3N0bmFtZTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgndGFrU2VydmVySG9zdG5hbWUnKSA/PyBiYXNlQ29uZmlnLnRha3NlcnZlci5ob3N0bmFtZSxcbiAgICAgIHNlcnZpY2VuYW1lOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd0YWtTZXJ2ZXJTZXJ2aWNlbmFtZScpID8/IGJhc2VDb25maWcudGFrc2VydmVyLnNlcnZpY2VuYW1lLFxuICAgICAgYnJhbmRpbmc6IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ2JyYW5kaW5nJykgPz8gYmFzZUNvbmZpZy50YWtzZXJ2ZXIuYnJhbmRpbmcsXG4gICAgICB2ZXJzaW9uOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd0YWtTZXJ2ZXJWZXJzaW9uJykgPz8gYmFzZUNvbmZpZy50YWtzZXJ2ZXIudmVyc2lvbixcbiAgICAgIHVzZVMzQ29uZmlnOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCd1c2VTM0NvbmZpZycpID8/IGJhc2VDb25maWcudGFrc2VydmVyLnVzZVMzQ29uZmlnLFxuICAgIH0sXG4gICAgZ2VuZXJhbDoge1xuICAgICAgLi4uYmFzZUNvbmZpZy5nZW5lcmFsLFxuICAgICAgcmVtb3ZhbFBvbGljeTogYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgncmVtb3ZhbFBvbGljeScpIHx8IGJhc2VDb25maWcuZ2VuZXJhbC5yZW1vdmFsUG9saWN5LFxuICAgICAgZW5hYmxlRGV0YWlsZWRMb2dnaW5nOiBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbmFibGVEZXRhaWxlZExvZ2dpbmcnKSA/PyBiYXNlQ29uZmlnLmdlbmVyYWwuZW5hYmxlRGV0YWlsZWRMb2dnaW5nLFxuICAgIH0sXG4gIH07XG59Il19