"use strict";
/**
 * CloudFormation import utilities for base infrastructure resources
 * This file contains constants and functions for importing values from other stacks
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BASE_EXPORT_NAMES = void 0;
exports.createBaseImportValue = createBaseImportValue;
exports.createAuthImportValue = createAuthImportValue;
/**
 * Common export names for base infrastructure resources (imported from base stack)
 */
exports.BASE_EXPORT_NAMES = {
    VPC_ID: 'VpcId',
    VPC_CIDR_IPV4: 'VpcCidrIpv4',
    VPC_CIDR_IPV6: 'VpcCidrIpv6',
    SUBNET_PRIVATE_A: 'SubnetPrivateA',
    SUBNET_PRIVATE_B: 'SubnetPrivateB',
    SUBNET_PUBLIC_A: 'SubnetPublicA',
    SUBNET_PUBLIC_B: 'SubnetPublicB',
    ECS_CLUSTER: 'EcsClusterArn',
    ECR_REPO: 'EcrRepoArn',
    KMS_KEY: 'KmsKeyArn',
    KMS_ALIAS: 'KmsAlias',
    S3_BUCKET: 'S3BucketArn',
    S3_ID: 'S3-ID',
    CERTIFICATE_ARN: 'CertificateArn',
    HOSTED_ZONE_ID: 'HostedZoneId',
    HOSTED_ZONE_NAME: 'HostedZoneName',
};
/**
 * Helper to create base infrastructure import value names
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @param exportName - The specific export name suffix from BASE_EXPORT_NAMES
 * @returns Full import value reference for base infrastructure
 */
function createBaseImportValue(environment, exportName) {
    const baseStackName = `TAK-${environment}-BaseInfra`;
    return `${baseStackName}-${exportName}`;
}
/**
 * Helper to create auth infrastructure import value names for cross-stack references
 * @param environment - Environment name (e.g. 'prod', 'dev', 'test', etc.)
 * @param exportName - The specific export name suffix
 * @returns Full import value reference for auth infrastructure
 */
function createAuthImportValue(environment, exportName) {
    const authStackName = `TAK-${environment}-AuthInfra`;
    return `${authStackName}-${exportName}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmb3JtYXRpb24taW1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsb3VkZm9ybWF0aW9uLWltcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBOEJILHNEQUdDO0FBUUQsc0RBR0M7QUExQ0Q7O0dBRUc7QUFDVSxRQUFBLGlCQUFpQixHQUFHO0lBQy9CLE1BQU0sRUFBRSxPQUFPO0lBQ2YsYUFBYSxFQUFFLGFBQWE7SUFDNUIsYUFBYSxFQUFFLGFBQWE7SUFDNUIsZ0JBQWdCLEVBQUUsZ0JBQWdCO0lBQ2xDLGdCQUFnQixFQUFFLGdCQUFnQjtJQUNsQyxlQUFlLEVBQUUsZUFBZTtJQUNoQyxlQUFlLEVBQUUsZUFBZTtJQUNoQyxXQUFXLEVBQUUsZUFBZTtJQUM1QixRQUFRLEVBQUUsWUFBWTtJQUN0QixPQUFPLEVBQUUsV0FBVztJQUNwQixTQUFTLEVBQUUsVUFBVTtJQUNyQixTQUFTLEVBQUUsYUFBYTtJQUN4QixLQUFLLEVBQUUsT0FBTztJQUNkLGVBQWUsRUFBRSxnQkFBZ0I7SUFDakMsY0FBYyxFQUFFLGNBQWM7SUFDOUIsZ0JBQWdCLEVBQUUsZ0JBQWdCO0NBQzFCLENBQUM7QUFFWDs7Ozs7R0FLRztBQUNILFNBQWdCLHFCQUFxQixDQUFDLFdBQW1CLEVBQUUsVUFBa0I7SUFDM0UsTUFBTSxhQUFhLEdBQUcsT0FBTyxXQUFXLFlBQVksQ0FBQztJQUNyRCxPQUFPLEdBQUcsYUFBYSxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQzFDLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLHFCQUFxQixDQUFDLFdBQW1CLEVBQUUsVUFBa0I7SUFDM0UsTUFBTSxhQUFhLEdBQUcsT0FBTyxXQUFXLFlBQVksQ0FBQztJQUNyRCxPQUFPLEdBQUcsYUFBYSxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQzFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENsb3VkRm9ybWF0aW9uIGltcG9ydCB1dGlsaXRpZXMgZm9yIGJhc2UgaW5mcmFzdHJ1Y3R1cmUgcmVzb3VyY2VzXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgY29uc3RhbnRzIGFuZCBmdW5jdGlvbnMgZm9yIGltcG9ydGluZyB2YWx1ZXMgZnJvbSBvdGhlciBzdGFja3NcbiAqL1xuXG4vKipcbiAqIENvbW1vbiBleHBvcnQgbmFtZXMgZm9yIGJhc2UgaW5mcmFzdHJ1Y3R1cmUgcmVzb3VyY2VzIChpbXBvcnRlZCBmcm9tIGJhc2Ugc3RhY2spXG4gKi9cbmV4cG9ydCBjb25zdCBCQVNFX0VYUE9SVF9OQU1FUyA9IHtcbiAgVlBDX0lEOiAnVnBjSWQnLFxuICBWUENfQ0lEUl9JUFY0OiAnVnBjQ2lkcklwdjQnLFxuICBWUENfQ0lEUl9JUFY2OiAnVnBjQ2lkcklwdjYnLFxuICBTVUJORVRfUFJJVkFURV9BOiAnU3VibmV0UHJpdmF0ZUEnLFxuICBTVUJORVRfUFJJVkFURV9COiAnU3VibmV0UHJpdmF0ZUInLFxuICBTVUJORVRfUFVCTElDX0E6ICdTdWJuZXRQdWJsaWNBJyxcbiAgU1VCTkVUX1BVQkxJQ19COiAnU3VibmV0UHVibGljQicsXG4gIEVDU19DTFVTVEVSOiAnRWNzQ2x1c3RlckFybicsXG4gIEVDUl9SRVBPOiAnRWNyUmVwb0FybicsXG4gIEtNU19LRVk6ICdLbXNLZXlBcm4nLFxuICBLTVNfQUxJQVM6ICdLbXNBbGlhcycsXG4gIFMzX0JVQ0tFVDogJ1MzQnVja2V0QXJuJyxcbiAgUzNfSUQ6ICdTMy1JRCcsXG4gIENFUlRJRklDQVRFX0FSTjogJ0NlcnRpZmljYXRlQXJuJyxcbiAgSE9TVEVEX1pPTkVfSUQ6ICdIb3N0ZWRab25lSWQnLFxuICBIT1NURURfWk9ORV9OQU1FOiAnSG9zdGVkWm9uZU5hbWUnLFxufSBhcyBjb25zdDtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY3JlYXRlIGJhc2UgaW5mcmFzdHJ1Y3R1cmUgaW1wb3J0IHZhbHVlIG5hbWVzXG4gKiBAcGFyYW0gZW52aXJvbm1lbnQgLSBFbnZpcm9ubWVudCBuYW1lIChlLmcuICdwcm9kJywgJ2RldicsICd0ZXN0JywgZXRjLilcbiAqIEBwYXJhbSBleHBvcnROYW1lIC0gVGhlIHNwZWNpZmljIGV4cG9ydCBuYW1lIHN1ZmZpeCBmcm9tIEJBU0VfRVhQT1JUX05BTUVTXG4gKiBAcmV0dXJucyBGdWxsIGltcG9ydCB2YWx1ZSByZWZlcmVuY2UgZm9yIGJhc2UgaW5mcmFzdHJ1Y3R1cmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJhc2VJbXBvcnRWYWx1ZShlbnZpcm9ubWVudDogc3RyaW5nLCBleHBvcnROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBiYXNlU3RhY2tOYW1lID0gYFRBSy0ke2Vudmlyb25tZW50fS1CYXNlSW5mcmFgO1xuICByZXR1cm4gYCR7YmFzZVN0YWNrTmFtZX0tJHtleHBvcnROYW1lfWA7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGNyZWF0ZSBhdXRoIGluZnJhc3RydWN0dXJlIGltcG9ydCB2YWx1ZSBuYW1lcyBmb3IgY3Jvc3Mtc3RhY2sgcmVmZXJlbmNlc1xuICogQHBhcmFtIGVudmlyb25tZW50IC0gRW52aXJvbm1lbnQgbmFtZSAoZS5nLiAncHJvZCcsICdkZXYnLCAndGVzdCcsIGV0Yy4pICBcbiAqIEBwYXJhbSBleHBvcnROYW1lIC0gVGhlIHNwZWNpZmljIGV4cG9ydCBuYW1lIHN1ZmZpeFxuICogQHJldHVybnMgRnVsbCBpbXBvcnQgdmFsdWUgcmVmZXJlbmNlIGZvciBhdXRoIGluZnJhc3RydWN0dXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdXRoSW1wb3J0VmFsdWUoZW52aXJvbm1lbnQ6IHN0cmluZywgZXhwb3J0TmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgYXV0aFN0YWNrTmFtZSA9IGBUQUstJHtlbnZpcm9ubWVudH0tQXV0aEluZnJhYDtcbiAgcmV0dXJuIGAke2F1dGhTdGFja05hbWV9LSR7ZXhwb3J0TmFtZX1gO1xufSJdfQ==