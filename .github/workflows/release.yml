name: Release

on:
  push:
    tags:
      - 'v*'  # Accept all v* tags (v1.0.0, v2025.6, v2025.6.1, etc.)

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Get tag and previous tag
        id: tags
        run: |
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          echo "current-tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          
          # Get previous tag for changelog generation
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$CURRENT_TAG" | head -n1)
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Found tags: current=$CURRENT_TAG, previous=$PREVIOUS_TAG"

      - name: Generate Release Notes
        id: changelog
        run: |
          CURRENT_TAG="${{ steps.tags.outputs.current-tag }}"
          PREVIOUS_TAG="${{ steps.tags.outputs.previous-tag }}"
          
          echo "## Release $CURRENT_TAG" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Try to extract from CHANGELOG.md first
          if [[ -f "CHANGELOG.md" ]] && grep -q "### $CURRENT_TAG" CHANGELOG.md; then
            echo "ðŸ“‹ **Changes from CHANGELOG.md:**" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            awk "/### $CURRENT_TAG/,/### [v0-9]/ {
              if (/### [v0-9]/ && !/### $CURRENT_TAG/) exit;
              if (!/### $CURRENT_TAG/) print
            }" CHANGELOG.md >> RELEASE_NOTES.md
          else
            # Generate from git commits
            echo "ðŸ“‹ **Changes since $PREVIOUS_TAG:**" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            if [[ -n "$PREVIOUS_TAG" ]]; then
              git log --pretty=format:"- %s" "$PREVIOUS_TAG..$CURRENT_TAG" >> RELEASE_NOTES.md
            else
              echo "- Initial release" >> RELEASE_NOTES.md
            fi
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "---" >> RELEASE_NOTES.md
          echo "ðŸš€ **Deployment:** This release will trigger production deployment after approval." >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          generate_release_notes: true  # GitHub will append auto-generated notes
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
