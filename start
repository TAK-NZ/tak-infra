#!/bin/bash
#
# Build CoreConfig & Associated Cert Generation
#

. $NVM_DIR/nvm.sh

set -euo pipefail

echo "NodeJS Version: $(node --version)"

# Ensure TAK certs Directory is present
if [ -d "/opt/tak/certs/files/" ]; then
    mkdir -p "/opt/tak/certs/files/"
fi

# Attempt to restore Certbot Cronjob or save it, if it exists
if [ ! -e "/etc/cron.d/certbot" ]; then
    cp /etc/letsencrypt/certbot.cron /etc/cron.d/certbot || true
else
    cp /etc/cron.d/certbot /etc/letsencrypt/certbot.cron || true
fi

# If LetsEncrypt certs are present - check validity
if [ -d "/etc/letsencrypt/live/${HostedDomain}" ]; then
    # Extract the issuer from the certificate
    ISSUER=$(openssl x509 -noout -issuer -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem")

    # Check if the issuer is from the Let's Encrypt staging environment
    if echo "$ISSUER" | grep -q "STAGING"; then
        if [ "${LetsencryptProdCert}" != "true" ]; then
            echo "ok - Test Cert"
        else
            echo "ok - Production Cert Requested - Test Cert Current - Regenerating"
            rm -rf "/etc/letsencrypt/live/${HostedDomain}"
            rm -rf "/opt/tak/certs/files/${HostedDomain}"
        fi
    else
        if [ "${LetsencryptProdCert}" != "true" ]; then
            echo "ok - Test Cert Requested - Prod Cert Current - Regenerating"
            rm -rf "/etc/letsencrypt/live/${HostedDomain}"
            rm -rf "/opt/tak/certs/files/${HostedDomain}"
        else
            echo "ok - Prod Cert"
        fi
    fi
fi

# If no LetsEncrypt certs are present - generate a set
if [ ! -d "/etc/letsencrypt/live/${HostedDomain}" ]; then
    echo "ok - No Certificates detected, requesting one"

    node ./Ensure80.js

    CertbotParameter=""
    if [ "${LetsencryptProdCert}" != "true" ]; then
        CertbotParameter="--test-cert "
    fi

    Command="certbot certonly -v ${CertbotParameter}--standalone -d ${HostedDomain} --email ${HostedEmail} --non-interactive --agree-tos --cert-name ${HostedDomain} --deploy-hook /opt/tak/letsencrypt-deploy-hook-script.sh"

    while ! $Command; do
        echo "not ok - Command failed, retrying in 10 seconds..."
        sleep 10
        node ./Ensure80.js
    done

    # Save Certbot Cronjob
    cp /etc/cron.d/certbot /etc/letsencrypt/certbot.cron

    # Generate TAK certs
    /opt/tak/certs/cert-metadata.sh

    mkdir -p "/opt/tak/certs/files/${HostedDomain}/"

    openssl x509 \
        -text \
        -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem" \
        -noout

    openssl pkcs12 \
        -export \
        -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem" \
        -inkey "/etc/letsencrypt/live/${HostedDomain}/privkey.pem" \
        -out "/opt/tak/certs/files/${HostedDomain}/letsencrypt.p12" \
        -name "${HostedDomain}" \
        -password "pass:atakatak"
fi

if [ ! -f "/opt/tak/certs/files/${HostedDomain}/letsencrypt.jks" ]; then
    cp "/etc/letsencrypt/live/${HostedDomain}/"* "/opt/tak/certs/files/${HostedDomain}/"

    keytool \
        -importkeystore \
        -srcstorepass "atakatak" \
        -deststorepass "atakatak" \
        -destkeystore "/opt/tak/certs/files/${HostedDomain}/letsencrypt.jks" \
        -srckeystore "/opt/tak/certs/files/${HostedDomain}/letsencrypt.p12" \
        -srcstoretype "pkcs12"
fi

cd /opt/tak/certs
if [ ! -f "/opt/tak/certs/files/ca.pem" ]; then
    /opt/tak/certs/makeRootCa.sh --ca-name ${StackName:-TAKServer}
    { yes || :; } | /opt/tak/certs/makeCert.sh ca intermediate-ca
    { yes || :; } | /opt/tak/certs/makeCert.sh server takserver
    { yes || :; } | /opt/tak/certs/makeCert.sh client admin

    aws secretsmanager put-secret-value \
        --secret-id ${StackName}/tak-admin-cert \
        --secret-binary fileb://files/admin.p12 || true
fi

cd /opt/tak

node CoreConfig.js

/opt/tak/validateConfig.sh /opt/tak/CoreConfig.xml

java -jar /opt/tak/db-utils/SchemaManager.jar validate
java -jar /opt/tak/db-utils/SchemaManager.jar upgrade

/opt/tak/configureInDocker.sh init &

SetAdminCommand="java -jar /opt/tak/utils/UserManager.jar certmod -A /opt/tak/certs/files/admin.pem"
while ! $SetAdminCommand; do
   echo "Making admin and admin failed, retrying in 10 seconds..."
   sleep 10
done

wait
