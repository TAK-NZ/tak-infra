#!/bin/bash
#
# Build CoreConfig & Associated Cert Generation
#

. $NVM_DIR/nvm.sh

set -euo pipefail

echo "NodeJS Version: $(node --version)"

# Ensure TAK certs Directory is present
if [ -d "/opt/tak/certs/files/" ]; then
    mkdir -p "/opt/tak/certs/files/"
fi

# Attempt to restore Certbot Cronjob or save it, if it exists
if [ ! -e "/etc/cron.d/certbot" ]; then
    cp /etc/letsencrypt/certbot.cron /etc/cron.d/certbot || true
else
    cp /etc/cron.d/certbot /etc/letsencrypt/certbot.cron || true
fi

# Check if TAK certs exist, otherwise generate them
cd /opt/tak/certs
if [ ! -f "/opt/tak/certs/files/ca.pem" ]; then
    /opt/tak/certs/cert-metadata.sh
    mkdir -p "/opt/tak/certs/files/${HostedDomain}/"
    /opt/tak/certs/makeRootCa.sh --ca-name ${StackName:-TAKServer}
    { yes || :; } | /opt/tak/certs/makeCert.sh ca intermediate-ca
    { yes || :; } | /opt/tak/certs/makeCert.sh server takserver
    { yes || :; } | /opt/tak/certs/makeCert.sh client admin

    aws secretsmanager put-secret-value \
        --secret-id ${StackName}/tak-admin-cert \
        --secret-binary fileb://files/admin.p12 || true
fi

# Restore LetsEncrypt cert
# If no previous LetsEncrypt certs exist, use the self-signed ones
if [ ! -f "/opt/tak/certs/files/${HostedDomain}/letsencrypt.jks" ]; then
    mkdir /opt/tak/certs/files/${HostedDomain} || true
    if [ -d "/etc/letsencrypt/live/${HostedDomain}" ]; then
        # Previous LetsEncrypt cert exists, convert it
        echo "ok - Converting LetsEncrypt certs to TAK format"
        openssl x509 \
            -text \
            -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem" \
            -noout

        openssl pkcs12 \
            -export \
            -in "/etc/letsencrypt/live/${HostedDomain}/fullchain.pem" \
            -inkey "/etc/letsencrypt/live/${HostedDomain}/privkey.pem" \
            -out "/opt/tak/certs/files/${HostedDomain}/letsencrypt.p12" \
            -name "${HostedDomain}" \
            -password "pass:atakatak"

        keytool \
            -importkeystore \
            -srcstorepass "atakatak" \
            -deststorepass "atakatak" \
            -destkeystore "/opt/tak/certs/files/${HostedDomain}/letsencrypt.jks" \
            -srckeystore "/opt/tak/certs/files/${HostedDomain}/letsencrypt.p12" \
            -srcstoretype "pkcs12" 
    else 
        # No previous LetsEncrypt cert exists, use the self-signed one
        echo "ok - Using self-signed certs instead of LetsEncrypt"
        cp /opt/tak/certs/files/takserver.jks /opt/tak/certs/files/${HostedDomain}/letsencrypt.jks || true
    fi
fi

# Request LetsEncrypt certs in background
/opt/tak/letsencrypt-request-cert.sh &

cd /opt/tak

node CoreConfig.js

/opt/tak/validateConfig.sh /opt/tak/CoreConfig.xml

java -jar /opt/tak/db-utils/SchemaManager.jar validate
java -jar /opt/tak/db-utils/SchemaManager.jar upgrade

/opt/tak/configureInDocker.sh init &

SetAdminCommand="java -jar /opt/tak/utils/UserManager.jar certmod -A /opt/tak/certs/files/admin.pem"
while ! $SetAdminCommand; do
   echo "Making admin and admin failed, retrying in 10 seconds..."
   sleep 10
done

# Run cron in foreground
echo "ok - Starting cron for cert renewals"
/usr/sbin/cron -f
